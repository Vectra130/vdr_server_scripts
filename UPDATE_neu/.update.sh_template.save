cat > $UPDATEDIR/exec_update.sh <<EOF_1
#!/bin/bash
#Update Script v1.0
#Nicht bearbeiten!! Wird von automatisch erstellt
#Alle Configs werden gesichert
#Alle neuen Dateien werden kopiert

logger -t UPDATE "Update startet ..."

clear
echo -e "\t\t\tUpdate $VERSION wird vorbereitet ..."

#Konfiguration

#Simulieren???
SIMU=1

SYSTEM="eeebox"
SYSTEM2="eeeBox" # nur fuer simulation
SYSROOT=\$SYSTEM"_root"
UPDATEVERSION="$VERSION"
UPDATEDIR=/UPDATE/\$SYSTEM
[ "x\$SIMU" == x1 ] && UPDATEDIR=/nfs/backup/VDR_System_Backups_fuer_Stick/update_\${SYSTEM2}_v$VERSION

update_fail() {
	echo -e "\n\n\e[31mIrgendwas lief schief!!! ... ABBRUCH!!!\e[0m\n\n"
	exit 2
}

update_break() {
	echo -e "\n\n\n"
	exit 1
}

backup_files() {
echo -e "\n\n\t\t\tSichere Dateien ..."
while read backupFile; do
	[ ! -d \$UPDATEDIR/BACKUP/\$(dirname \$backupFile) ] && mkdir -p \$UPDATEDIR/BACKUP/\$(dirname \$backupFile)
	cp -rav --parents \$UPDATEDIR/sysRoot/\$backupFile \$UPDATEDIR/BACKUP/\$backupFile || update_fail
done < \$UPDATEDIR/.exec_update_backup.rsync
}

get_system_drives() {
echo -e "\n\n\t\t\tSuche System Laufwerke ..."
for i in 1 2 3 4 5; do
        sysRoot=\$(blkid | grep "\$SYSROOT" | awk -F":" '{ print \$1 }')
        if [[ x\$sysRoot == x && \$i -lt 5 ]]; then
                echo -e "--> System Lausferk mit der Bezeichnung '\$SYSROOT' wurde nicht gefunden! Im Falle eines RasPi Updates die SD Karte entfernen und die RasPi System SD Karte einschieben. Anschliessend ENTER druecken ..."; read x
        fi
	if [[ x\$sysRoot == x && \$i == 5 ]]; then
	update_fail
	fi
done
[ ! -d \$UPDATEDIR/sysRoot ] && mkdir -p \$UPDATEDIR/sysRoot
# sysRoot mounten
if [ "x\$SIMU" == 1 ]; then
	mount -o ro \$sysRoot \$UPDATEDIR/sysRoot
else
	mount \$sysRoot \$UPDATEDIR/sysRoot || update_fail
fi
echo "\$sysRoot gemounted"
. \$UPDATEDIR/sysRoot/etc/vectra130/configs/sysconfig/.sysconfig || update_fail
# weitere Platten, falls gefunden in sysRoot mounten
while read drives; do
	if [ \$(echo \$drives | grep UUID | grep -v ^"#" | grep -v vdrvideo | grep -v tmpfs | grep -v proc | wc -l) == 1 ]; then
		uuid=\$(echo \$drives | awk '{ print \$1 }' | sed -e 's/UUID=//')
		point=\$(echo \$drives | awk '{ print \$2 }')
		fstyp=\$(echo \$drives | awk '{ print \$3 }')
		if [ "x\$SIMU" == 1 ]; then
			mount -o ro,\$fstyp /dev/disk/by-uuid/\$uuid \$UPDATEDIR/sysRoot\$point
		else
			mount -o \$fstyp /dev/disk/by-uuid/\$uuid \$UPDATEDIR/sysRoot\$point || update_fail
		fi
		echo "--> \$point gemounted"
	fi
done < \$UPDATEDIR/sysRoot/etc/fstab
}

check_version() {
echo -e "\n\n\n\t\tPruefe Version ..."
tmpVers=\$(cat \$UPDATEDIR/sysRoot/etc/vectra130/VERSION)
tmpVers1=\$(echo \$tmpVers | awk -F"." '{ print \$1 }')
tmpVers2=\$(echo \$tmpVers | awk -F"." '{ print \$2 }')
tmpVers3=\$(echo \$tmpVers | awk -F"." '{ print \$3 }')
thisVers=\$[ tmpVers1*1000000 + tmpVers2*1000 + tmpVers3 ]
tmpVers=\$UPDATEVERSION
tmpVers1=\$(echo \$tmpVers | awk -F"." '{ print \$1 }')
tmpVers2=\$(echo \$tmpVers | awk -F"." '{ print \$2 }')
tmpVers3=\$(echo \$tmpVers | awk -F"." '{ print \$3 }')
newVers=\$[ tmpVers1*1000000 + tmpVers2*1000 + tmpVers3 ]
echo -e "\t\t\tNeue Version: \$newVers\t\tIstVersion: \$thisVers"
if [ "\$thisVers" -ge "\$newVers" ]; then
        echo -e "\n\n\t\tDie aktuelle Version deines Systems ist nicht aelter als die Update Version! Breche ab ..."
        update_break
fi
}


get_sys_drives
check_version
backup_files

exit 0











#configs sichern
echo "# sichere configs" >> \$LOG
rm -rv /etc/vectra130/backup >> \$LOG
mkdir -pv /etc/vectra130/backup/vdrconfig >> \$LOG
mkdir -pv /etc/vectra130/backup/xbmcconfig >> \$LOG
mkdir -pv /etc/vectra130/backup/sysconfig >> \$LOG
cp -rv \$VDRCONFDIR/* /etc/vectra130/backup/vdrconfig/ >> \$LOG
cp -rv \$XBMCCONFDIR/* /etc/vectra130/backup/xbmcconfig/ >> \$LOG
cp -rv \$VDRCONFDIR/.[a-z]* /etc/vectra130/backup/vdrconfig/ >> \$LOG
cp -rv \$SYSCONFDIR/* /etc/vectra130/backup/sysconfig/ >> \$LOG
cp -rv \$SYSCONFDIR/.[a-z]* /etc/vectra130/backup/sysconfig/ >> \$LOG

#apt install/purge listen erstellen
if [ -e dpkg_list_new ]; then
	echo -e "# dpkg-listen erstellen" >> \$LOG
        [ -e dpkg_list.diff ] && rm dpkg_list.diff
        dpkg -l > dpkg_list_now
	cat dpkg_list_now | grep -A 50000 "+++-===" > dpkg_list_now_tmp
	cat dpkg_list_new | grep -A 50000 "+++-===" > dpkg_list_new_tmp
	mv dpkg_list_now_tmp dpkg_list_now
	mv dpkg_list_new_tmp dpkg_list_new
        diff dpkg_list_now dpkg_list_new > dpkg_list.diff
	echo -e "\n### diff dpkg_list_now dpkg_list_new" >> \$LOG
	diff dpkg_list_now dpkg_list_new >> \$LOG
	echo -e "###\n"
        while read dpkglist; do
                if [ "\${dpkglist:0:1}" == ">" ]; then
                        APT_INSTALL+=\$(echo "\$dpkglist" | grep ^">" | awk '{ print \$3 }')" "
                fi
                if [ "\${dpkglist:0:1}" == "<" ]; then
			if [ \$(cat dpkg_list.diff | grep ^">" | grep "\$(echo \$dpkglist | awk '{ print \$3 }')" | wc -l) == "0" ]; then
	                        APT_PURGE+=\$(echo "\$dpkglist" | grep ^"<" | awk '{ print \$3 }')" "
			fi
                fi
        done < dpkg_list.diff
fi

#apt hold liste erstellen
if [ -e aptitude_hold ]; then
	echo -e "# aptitude-hold-listen erstellen" >> \$LOG
	APT_HOLD=""
	while read hold; do
		APT_HOLD+=\$(echo \$hold | awk '{ print \$2 }')" "
	done < aptitude_hold
fi

#Ende der Vorbereitungen
return 0
} # >> \$LOG

update() {
echo "##### update" >> \$LOG
#boot als rw mounten
mount -o rw,remount /boot
#Update durchfuehren
main_update

#Dateien kopieren
echo -e "# Dateien kopieren" >> \$LOG
for cpfile in \$(find ./COPY_FILES/ -type f | sed 's/^\.\/COPY_FILES\///'); do
	[ -d \$(dirname /"\$cpfile") ] || mkdir -p \$(dirname /"\$cpfile")
	[[ -e /"\$cpfile" && "\$cpfile" != "" && "\$cpfile" != "/" ]] && rm -f /"\$cpfile"

        cp -frav COPY_FILES/"\$cpfile" /"\$cpfile" >> \$LOG
done

#Patche anwenden
echo -e "# Patche anwenden" >> \$LOG
for patchfile in \$(find ./PATCHES/ -type f | sed 's/^\.\/PATCHES\///'); do
        patch -p0 -N -i PATCHES/"\$patchfile"
done

#configs wiederherstellen
echo -e "# Configs wiederherstellen" >> \$LOG
#.config
while read wert; do
	if [ "\${wert:0:5}" == "/null" ]; then
		sed -i -e 's/\('\$(echo "\$wert" | awk -F: '{ print \$2 }')'\)[:].*\([:][A-L][:][0-9]\)/\1:'\$(echo "\$wert" | awk -F: '{ print \$3 }')'\2/' /etc/vectra130/configs/sysconfig/.config
		cat /etc/vectra130/configs/sysconfig/.config | grep "\$(echo "\$wert" | awk -F: '{ print \$2 }'):'\$(echo "\$wert" | awk -F: '{ print \$3 }')'[:][A-L][:][0-9]" >> \$LOG
	fi
done < /etc/vectra130/backup/sysconfig/.config

#Grub und Initramfs erneuern
update-initramfs -u
update-grub

return 0
} # >> \$LOG

end_update() {
echo "##### end_update" >> \$LOG
#Update Ende
#Abschliessende Aktionen
if [ "X\$CLEANSTART" == "XYES" ]; then
echo "# firststart einleiten"
	sed -i -e 's/FIRSTSTART:0/FIRSTSTART:1/' \$SYSCONFDIR/.config
	\$SCRIPTDIR/.create_sysconfig.sh
	\$SCRIPTDIR/.sysconf_changes.sh
fi
echo "\$UPDATEVERSION" > /etc/vectra130/VERSION
return 0
} # >> \$LOG

update_fail() {
cat >> \$LOG <<EOF
##############################################################################
Update Fehlgeschlagen!!!
Rueckgabewert = \$?
# 0 = OK
# 1 = Versions Check
# 2 = Update Check
# 3 = Vorbereitungen
# 4 = Update
# 5 = Abschluss
EOF
echo -e "\n\n\n########################## SYSLOG #############################\n\n\n" >> \$LOG
tail -500 /var/log/syslog >> \$LOG
cp \$LOG /etc/vectra130/configs/userconfig/errorlog_\$(basename \$LOG)

image="updatefail"
[ $SYSTYP != Server ] && showscreenimage_$SYSTYP
exit 0
}

update_ok() {
echo "##### Update OK" >> \$LOG
echo -e "\n\n\n########################## SYSLOG #############################\n\n\n" >> \$LOG
tail -500 /var/log/syslog >> \$LOG
image="updateok"
[ $SYSTYP != Server ] && showscreenimage_$SYSTYP
sleep 10
}

#Update Ablauf
logger -t UPDATE "get_version"
get_version
[ "\$?" != 0 ] && update_fail
logger -t UPDATE "check_update"
check_update
[ "\$?" != 0 ] && update_fail
logger -t UPDATE "prepare"
prepare
[ "\$?" != 0 ] && update_fail
logger -t UPDATE "update"
update
[ "\$?" != 0 ] && update_fail
logger -t UPDATE "end_update"
end_update
logger -t UPDATE "update_ok"
update_ok

#Neustart
echo "###Neustart" >> \$LOG
/sbin/init reboot

exit 0
EOF_1
